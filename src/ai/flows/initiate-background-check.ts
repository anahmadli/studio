// This file is generated by Firebase Genkit.
'use server';

/**
 * @fileOverview A flow to initiate a background check for a user.
 *
 * - initiateBackgroundCheck - A function that handles the background check process.
 * - BackgroundCheckInput - The input type for the initiateBackgroundCheck function.
 * - BackgroundCheckOutput - The return type for the initiateBackgroundCheck function.
 */

import {ai} from '@/ai/genkit';
import {z} from 'genkit';

export const BackgroundCheckInputSchema = z.object({
  firstName: z.string().describe('The first name of the person.'),
  middleName: z.string().optional().describe('The middle name of the person.'),
  lastName: z.string().describe('The last name of the person.'),
  ssn: z.string().regex(/^\d{3}-\d{2}-\d{4}$/, "SSN must be in XXX-XX-XXXX format.").describe('The Social Security Number of the person.'),
  dob: z.string().regex(/^\d{4}-\d{2}-\d{2}$/, "Date of birth must be in YYYY-MM-DD format.").describe('The date of birth of the person (YYYY-MM-DD).'),
  address: z.string().describe('The street address of the person.'),
  city: z.string().describe('The city of the person.'),
  state: z.string().describe('The state of the person (2-letter abbreviation).'),
  zip: z.string().describe('The ZIP code of the person.'),
});
export type BackgroundCheckInput = z.infer<typeof BackgroundCheckInputSchema>;

export const BackgroundCheckOutputSchema = z.object({
  success: z.boolean().describe('Whether the background check was initiated successfully.'),
  reportId: z.string().optional().describe('The ID of the generated report.'),
  message: z.string().describe('A message describing the result.'),
});
export type BackgroundCheckOutput = z.infer<typeof BackgroundCheckOutputSchema>;

export async function initiateBackgroundCheck(input: BackgroundCheckInput): Promise<BackgroundCheckOutput> {
  return initiateBackgroundCheckFlow(input);
}

const initiateBackgroundCheckFlow = ai.defineFlow(
  {
    name: 'initiateBackgroundCheckFlow',
    inputSchema: BackgroundCheckInputSchema,
    outputSchema: BackgroundCheckOutputSchema,
  },
  async (input) => {
    // IMPORTANT: In a real application, get the API key from a secure location like environment variables.
    const apiKey = process.env.BACKGROUND_CHECKS_API_KEY;

    if (!apiKey) {
      console.error("Background Checks API key is missing.");
      return {
        success: false,
        message: "Server configuration error: API key is missing.",
      };
    }
    
    const apiUrl = 'https://api.backgroundchecks.com/v2/orders';

    const requestBody = {
        "candidate": {
            "first_name": input.firstName,
            "middle_name": input.middleName,
            "last_name": input.lastName,
            "ssn": input.ssn,
            "dob": input.dob,
            "address": input.address,
            "city": input.city,
            "state": input.state,
            "zip": input.zip
        },
        "order_detail": {
            "reference_code": `mymasjid-user-${Date.now()}`
        },
        "searches": [
            { "search_type": "criminal_database", "search_qualifier": "natl" },
            { "search_type": "sex_offender_database", "search_qualifier": "natl" }
        ]
    };

    try {
      const response = await fetch(apiUrl, {
        method: 'POST',
        headers: {
          'Content-Type': 'application/json',
          'Authorization': `Bearer ${apiKey}`,
        },
        body: JSON.stringify(requestBody),
      });

      const responseData = await response.json();

      if (!response.ok) {
        console.error("Background check API error:", responseData);
        return {
          success: false,
          message: responseData.message || 'Failed to initiate background check.',
        };
      }
      
      return {
        success: true,
        reportId: responseData.order_id,
        message: 'Background check initiated successfully!',
      };

    } catch (error) {
      console.error("Error calling background check API:", error);
      return {
        success: false,
        message: 'An unexpected error occurred.',
      };
    }
  }
);
